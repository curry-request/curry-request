{"abortion.md":"<h3 id=\"abortion\">Abortion</h3>\n<p>The returned promise also has an <strong>abort</strong> method for aborting the request.</p>\n","actions.md":"<h3 id=\"action-setup\">Action setup</h3>\n<p>Preparation of our actions (as controller-actions) is quite terse.</p>\n","config.md":"<h3 id=\"base-configuration\">Base Configuration</h3>\n<p>Curry Request is conceived to centralize the management of api calls to common services (both in Node and in the browser);<br>in the js ecosystem the most popular package for dealing with XHR is Axios, but we weren&#39;t satisfied with it so this module.<br><br/><br>Similar to Axios you can configure instances, and through the pluggable fetch module it can easily implement interceptors.<br><br/><br>Differently from Axios, it is not such a high abstraction,<br>it is built with the assumption that <strong>fetch is good enough</strong>, and it doesn&#39;t transform inputs and outputs so drastically.<br>this is done through a simple curried function, with the fetch parameters ordered for our convenience.</p>\n","example-from-motivation-post.md":"<h3 id=\"random-examples\">Random examples</h3>\n<p>These are some examples from the <a href=\"https://fcalo.com\">package motivation post</a>.</p>\n","http-call.md":"<h3 id=\"http-call\">Http call</h3>\n<p>The returning function is the one that actually makes the http-request,<br>keep in mind that you can supply the optional token value that will be used in authorization header, with the<br><em>Bearer</em> prefix.</p>\n","jwt-injection.md":"<h3 id=\"jwt-injection\">JWT injection</h3>\n<p>The last function of the curried chain takes one optional parameter we called <strong>token</strong>;<br>if present, this wiil be concatenated with the <strong>Bearer</strong> prefix and used as value for the <strong>Authorization</strong> header.</p>\n","post-payload.md":"<h3 id=\"post-payload\">Post payload</h3>\n<p>Passing a string in the payload body parameter will be simply attached as-is,<br>but if we pass ad object or array it will be automatically serialized.</p>\n"}